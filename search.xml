<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JavaScript学习笔记(三)]]></title>
    <url>%2F2017%2F07%2F22%2FJavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%89%2F</url>
    <content type="text"><![CDATA[函数闭包基础概念什么是闭包? 简单来说，闭包是指可以访问另一个函数作用域变量的函数，一般是定义在外层函数中的内层函数。 为什么需要闭包？ 局部变量无法共享和长久的保存，而全局变量可能造成变量污染，所以我们希望有一种机制既可以长久的保存变量又不会造成全局污染。 特点占用更多内存不容易被释放何时使用？变量既想反复使用，又想避免全局污染如何使用？ 1.定义外层函数，封装被保护的局部变量。 2.定义内层函数，执行对外部函数变量的操作。 3.外层函数返回内层函数的对象，并且外层函数被调用，结果保存在一个全局的变量中。 特点： 占用很多内存，引用后函数内的变量一直存在于内存中 不容易被释放 闭包的用途闭包可以用在许多地方。它的最大用处有两个，一个是可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。 123456789101112function f1()&#123; var n=999; nAdd=function()&#123;n+=1&#125; function f2()&#123; alert(n); &#125; return f2; &#125; var result=f1(); result(); // 999 nAdd(); result(); // 1000 在这段代码中，result实际上就是闭包f2函数。它一共运行了两次，第一次的值是999，第二次的值是1000。这证明了，函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除。为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。这段代码中另一个值得注意的地方，就是”nAdd=function(){n+=1}”这一行，首先在nAdd前面没有使用var关键字，因此nAdd是一个全局变量，而不是局部变量。其次，nAdd的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以nAdd相当于是一个setter，可以在函数外部对函数内部的局部变量进行操作。 使用闭包的注意点1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。 ps:这次的笔记只是引用其他文档笔记，闭包需要慢慢理解 相关引用:学习Javascript闭包（Closure）–阮一峰 文档:闭包(MDN)变量提升(MDN)JavaScript的十个难点JavaScript闭包-块级作用域和私有变量]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>前端</tag>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript学习笔记(二)]]></title>
    <url>%2F2017%2F07%2F08%2Fjavascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[简单的动画实践之前的想法构思1、动画由计时器setinterval控制开始，并且判断条件由clearinterval关闭计时器控制动画结束 2、每次动画开始先执行clearinterval关闭计时器,防止重复开启计时器导致动画加快或变慢 3、将动画封装成一个函数方法,以便与调用的方便和今后的重复使用 封装的函数123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657function startMove(obj,json,ms,fn)&#123; clearInterval(obj.timer); obj.timer=setInterval(function()&#123; //json数据 多个动画同时进行 for(var attr in json)&#123; var speed=0; var icur=0; var flag=true; //或许元素的属性值 进行计算 if (attr=='opacity') &#123; icur=Math.round(parseFloat(getStyle(obj,attr))*100); &#125; else&#123; icur=parseInt(getStyle(obj,attr)); &#125; //获取速度 并且进行缓冲动画 speed=(json[attr]-icur)/10; speed=speed&gt;0?Math.ceil(speed):Math.floor(speed); if (icur!=json[attr]) &#123; //判断一个动画是否完成 来执行同时进行的动画 flag=false; &#125; if (attr=='opacity') &#123; obj.style[attr]=(icur+speed)/100 &#125;else&#123; obj.style[attr]=icur+speed+'px'; &#125; &#125; if (flag) &#123; clearInterval(obj.timer); //链式动画 判断需不需要执行下一个动画 if (fn) &#123; fn(); &#125; &#125; &#125;,ms) &#125;//以下方法与element.style方法的主要区别就是 这个方法获取的是对象的最终显示样式 即使css没有设置一样可以获取，不过只能作为只读的属性 不能改变 function getStyle(obj,attr)&#123; if (obj.currentStyle) &#123; return obj.currentStyle[attr] //兼容ie 获取元素的属性值 不包括边框 &#125; else&#123; return getComputedStyle(obj,false)[attr]; //兼容一般的浏览器 &#125; &#125; 注意事项1、封装的函数动画属于缓冲动画，运动轨迹由快变慢，匀速动画只需执行判断动画方向后设置speed的值即可。 2、由于可以兼容多个动画同时进行，函数需要先进行判断所有动画懂执行完才能结束，所以要在for-in循环之前新建flag,循环之后判断后结束动画。 3、关于封装的获取对象属性值的函数中的getComputedStyle的函数与element.style的区别。 (1)前者获取的是对象最终在页面的属性值,后者只是获取的是css样式设置的属性值 (2)前者只是只读属性，后者可以读写 4、offsetwidth与clientwidth主要区别:前者获取的宽度包括了滚动条和边框 学习感触1、虽然这个运动框架是根据教程来的，但主要代码还是由自己一个一打的，也理解了动画的执行过程。 2、看似简单动画后面需要思考的知识点也很多,出现的bug也不少，需要自己慢慢排查并且解决。 3、前端并不简单，希望自己能一直坚持下去 the end]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>前端</tag>
        <tag>动画</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript学习笔记(一)]]></title>
    <url>%2F2017%2F07%2F03%2FJavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80%2F</url>
    <content type="text"><![CDATA[二叉树结构二叉树的概念二叉树（Binary Tree）是n（n&gt;=0）个结点的有限集合，该集合或者为空集（空二叉树），或者由一个根结点和两棵互不相交的、分别称为根结点的左子树和右子树的二叉树组成。 二叉树的特点每个结点最多有两棵子树，所以二叉树中不存在度大于2的结点。二叉树中每一个节点都是一个对象，每一个数据节点都有三个指针，分别是指向父母、左孩子和右孩子的指针。每一个节点都是通过指针相互连接的。相连指针的关系都是父子关系。 二叉树的遍历二叉树的遍历(traversing binary tree)是指从根结点出发，按照某种次序依次访问二叉树中所有结点，使得每个结点被访问一次且仅被访问一次。 二叉树的遍历有三种方式，如下： （1）前序遍历（DLR），首先访问根结点，然后遍历左子树，最后遍历右子树。简记根-左-右。 （2）中序遍历（LDR），首先遍历左子树，然后访问根结点，最后遍历右子树。简记左-根-右。 （3）后序遍历（LRD），首先遍历左子树，然后遍历右子树，最后访问根结点。简记左-右-根。 前序遍历若二叉树为空，则空操作返回，否则先访问根结点，然后前序遍历左子树，再前序遍历右子树。 遍历的顺序为：A B D H I E J C F K G JavaScript中的代码:1234567function preOrder(root)&#123; if (root) &#123; arr.push(root); preOrder(root.firstElementChild); preOrder(root.lastElementChild); &#125;&#125; 中序遍历若树为空，则空操作返回，否则从根结点开始（注意并不是先访问根结点），中序遍历根结点的左子树，然后是访问根结点，最后中序遍历右子树。 遍历的顺序为：H D I B E J A F K C G JavaScript中的代码:1234567function inOrder(root)&#123; if (root) &#123; inOrder(root.firstElementChild); arr.push(root); inOrder(root.lastElementChild); &#125;&#125; 后序遍历若树为空，则空操作返回，否则从左到右先叶子后结点的方式遍历访问左右子树，最后访问根结点。 遍历的顺序为：H I D J E B K F G C A JavaScript中的代码:1234567function postOrder(root)&#123; if (root) &#123; postOrder(root.firstElementChild); postOrder(root.lastElementChild); arr.push(root); &#125;&#125; 这节我认为的知识难点1、递归函数需要理解(尤其是这个,当然下面的也很重要) 2、二叉树的初步理解 3、DOM要开始注意了 4、JavaScript中的算法的重要性开始凸显出来了 代码地址 demo地址 相关链接:https://segmentfault.com/a/1190000000740261#articleHeader0 http://ife.baidu.com/note/detail/id/1221]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>前端</tag>
        <tag>算法结构</tag>
        <tag>DOM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo常用命令]]></title>
    <url>%2F2017%2F06%2F25%2FNexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[hexo基本命令安装hexo在blog文件夹安装,右键打开Git Bash输入 1$ npm install -g hexo-cli 如果长时间没反应,先执行下面的命令，将npm镜像转为国内镜像，然后在执行上面这条指令 1$ npm config set registry https://registry.npm.taobao.org 初始化hexo将github上的hexo项目clone下来1$ hexo init hexo 安装依赖文件 进入到hexo文件夹 1$ cd hexo 安装依赖文件： 1$ npm install 部署形成文件： 1$ hexo generate 本地测试: 1$ hexo server 部署到GitHub的命令1$ hexo clean #清除缓存 网页正常情况下可以忽略此条命令 1$ hexo generator #生成静态页面至public目录 1$ hexo deploy #将.deploy目录部署到GitHub 新手上路，请多指教！ over]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我的第一篇博文]]></title>
    <url>%2F2017%2F06%2F23%2F%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87%2F</url>
    <content type="text"><![CDATA[2017年6月23日，我的第一个个人博客诞生啦！希望能够一直写下去，文笔不怎么好，就这样吧]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>个人博文</tag>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F06%2F23%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>