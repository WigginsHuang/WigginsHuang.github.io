<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wiggins blog</title>
  <subtitle>蓄势待发,砥砺前行</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wigginshuang.github.io/"/>
  <updated>2017-07-22T08:17:47.252Z</updated>
  <id>https://wigginshuang.github.io/</id>
  
  <author>
    <name>WigginsHuang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript学习笔记(三)</title>
    <link href="https://wigginshuang.github.io/2017/07/22/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%89/"/>
    <id>https://wigginshuang.github.io/2017/07/22/JavaScript学习笔记-三/</id>
    <published>2017-07-22T07:54:56.000Z</published>
    <updated>2017-07-22T08:17:47.252Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数闭包"><a href="#函数闭包" class="headerlink" title="函数闭包"></a>函数闭包</h2><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><p>什么是闭包?</p>
<p>简单来说，闭包是指可以访问另一个函数作用域变量的函数，一般是定义在外层函数中的内层函数。</p>
<p>为什么需要闭包？</p>
<p>局部变量无法共享和长久的保存，而全局变量可能造成变量污染，所以我们希望有一种机制既可以长久的保存变量又不会造成全局污染。</p>
<p>特点占用更多内存不容易被释放何时使用？变量既想反复使用，又想避免全局污染如何使用？</p>
<p>1.定义外层函数，封装被保护的局部变量。</p>
<p>2.定义内层函数，执行对外部函数变量的操作。 </p>
<p>3.外层函数返回内层函数的对象，并且外层函数被调用，结果保存在一个全局的变量中。</p>
<p>特点：</p>
<p>占用很多内存，引用后函数内的变量一直存在于内存中</p>
<p>不容易被释放</p>
<p>闭包的用途<br>闭包可以用在许多地方。它的最大用处有两个，一个是可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">function f1()&#123;</div><div class="line">　　　　var n=<span class="number">999</span>;</div><div class="line">　　　　nAdd=function()&#123;n+=<span class="number">1</span>&#125;</div><div class="line">　　　　function f2()&#123;</div><div class="line">　　　　　　alert(n);</div><div class="line">　　　　&#125;</div><div class="line">　　　　<span class="keyword">return</span> f2;</div><div class="line">　　&#125;</div><div class="line">　　var result=f1();</div><div class="line">　　result(); <span class="regexp">//</span> <span class="number">999</span></div><div class="line">　　nAdd();</div><div class="line">　　result(); <span class="regexp">//</span> <span class="number">1000</span></div></pre></td></tr></table></figure>
<p>在这段代码中，result实际上就是闭包f2函数。它一共运行了两次，第一次的值是999，第二次的值是1000。这证明了，函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除。<br>为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。<br>这段代码中另一个值得注意的地方，就是”nAdd=function(){n+=1}”这一行，首先在nAdd前面没有使用var关键字，因此nAdd是一个全局变量，而不是局部变量。其次，nAdd的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以nAdd相当于是一个setter，可以在函数外部对函数内部的局部变量进行操作。</p>
<h3 id="使用闭包的注意点"><a href="#使用闭包的注意点" class="headerlink" title="使用闭包的注意点"></a>使用闭包的注意点</h3><p>1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;函数闭包&quot;&gt;&lt;a href=&quot;#函数闭包&quot; class=&quot;headerlink&quot; title=&quot;函数闭包&quot;&gt;&lt;/a&gt;函数闭包&lt;/h2&gt;&lt;h3 id=&quot;基础概念&quot;&gt;&lt;a href=&quot;#基础概念&quot; class=&quot;headerlink&quot; title=&quot;基础概念&quot;&gt;&lt;/a
    
    </summary>
    
      <category term="JavaScript" scheme="https://wigginshuang.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://wigginshuang.github.io/tags/JavaScript/"/>
    
      <category term="前端" scheme="https://wigginshuang.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="函数" scheme="https://wigginshuang.github.io/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记(二)</title>
    <link href="https://wigginshuang.github.io/2017/07/08/javascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C/"/>
    <id>https://wigginshuang.github.io/2017/07/08/javascript学习笔记-二/</id>
    <published>2017-07-08T13:16:03.000Z</published>
    <updated>2017-07-09T00:32:54.063Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单的动画"><a href="#简单的动画" class="headerlink" title="简单的动画"></a>简单的动画</h2><h3 id="实践之前的想法构思"><a href="#实践之前的想法构思" class="headerlink" title="实践之前的想法构思"></a>实践之前的想法构思</h3><p>1、动画由计时器setinterval控制开始，并且判断条件由clearinterval关闭计时器控制动画结束</p>
<p>2、每次动画开始先执行clearinterval关闭计时器,防止重复开启计时器导致动画加快或变慢</p>
<p>3、将动画封装成一个函数方法,以便与调用的方便和今后的重复使用</p>
<a id="more"></a>
<h3 id="封装的函数"><a href="#封装的函数" class="headerlink" title="封装的函数"></a>封装的函数</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">function startMove(obj,json,ms,fn)&#123;</div><div class="line">    clearInterval(obj.timer);</div><div class="line">    obj.timer=setInterval(function()&#123;</div><div class="line">    //json数据 多个动画同时进行    </div><div class="line">    for(var attr in json)&#123;</div><div class="line">    var speed=0;</div><div class="line">    var icur=0;</div><div class="line">    var flag=true;</div><div class="line">    //或许元素的属性值 进行计算</div><div class="line">    if (attr=='opacity') &#123;</div><div class="line"></div><div class="line">        icur=Math.round(parseFloat(getStyle(obj,attr))*100);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    else&#123;</div><div class="line">        icur=parseInt(getStyle(obj,attr));</div><div class="line">    &#125;</div><div class="line">     //获取速度 并且进行缓冲动画</div><div class="line">     speed=(json[attr]-icur)/10;</div><div class="line">     speed=speed&gt;0?Math.ceil(speed):Math.floor(speed);</div><div class="line">     </div><div class="line">    if (icur!=json[attr]) &#123;</div><div class="line"></div><div class="line">      //判断一个动画是否完成 来执行同时进行的动画</div><div class="line">      flag=false;</div><div class="line">    &#125;   </div><div class="line">        if (attr=='opacity') &#123;</div><div class="line">        obj.style[attr]=(icur+speed)/100</div><div class="line">        &#125;else&#123;</div><div class="line"></div><div class="line">        obj.style[attr]=icur+speed+'px';</div><div class="line">        &#125;</div><div class="line">   </div><div class="line">     &#125;</div><div class="line">       if (flag) &#123;</div><div class="line">        clearInterval(obj.timer);</div><div class="line">      //链式动画 判断需不需要执行下一个动画</div><div class="line">       if (fn) &#123;</div><div class="line">        fn();</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">    &#125;,ms)</div><div class="line">   </div><div class="line">   &#125;</div><div class="line"></div><div class="line">//以下方法与element.style方法的主要区别就是 这个方法获取的是对象的最终显示样式  即使css没有设置一样可以获取，不过只能作为只读的属性 不能改变</div><div class="line"></div><div class="line">     function getStyle(obj,attr)&#123;</div><div class="line">     if (obj.currentStyle) &#123;</div><div class="line"></div><div class="line">        return obj.currentStyle[attr]  //兼容ie 获取元素的属性值 不包括边框</div><div class="line">     &#125;</div><div class="line">     else&#123;</div><div class="line">       return getComputedStyle(obj,false)[attr]; //兼容一般的浏览器 </div><div class="line">       &#125;</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>1、封装的函数动画属于缓冲动画，运动轨迹由快变慢，匀速动画只需执行判断动画方向后设置speed的值即可。</p>
<p>2、由于可以兼容多个动画同时进行，函数需要先进行判断所有动画懂执行完才能结束，所以要在for-in循环之前新建flag,循环之后判断后结束动画。</p>
<p>3、关于封装的获取对象属性值的函数中的getComputedStyle的函数与element.style的区别。</p>
<p>(1)前者获取的是对象最终在页面的属性值,后者只是获取的是css样式设置的属性值</p>
<p>(2)前者只是只读属性，后者可以读写</p>
<p>4、offsetwidth与clientwidth主要区别:前者获取的宽度包括了<strong>滚动条</strong>和<strong>边框</strong></p>
<h2 id="学习感触"><a href="#学习感触" class="headerlink" title="学习感触"></a>学习感触</h2><p>1、虽然这个运动框架是根据教程来的，但主要代码还是由自己一个一打的，也理解了动画的执行过程。</p>
<p>2、看似简单动画后面需要思考的知识点也很多,出现的bug也不少，需要自己慢慢排查并且解决。</p>
<p>3、前端并不简单，希望自己能一直<strong>坚持下去</strong></p>
<p>the end</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简单的动画&quot;&gt;&lt;a href=&quot;#简单的动画&quot; class=&quot;headerlink&quot; title=&quot;简单的动画&quot;&gt;&lt;/a&gt;简单的动画&lt;/h2&gt;&lt;h3 id=&quot;实践之前的想法构思&quot;&gt;&lt;a href=&quot;#实践之前的想法构思&quot; class=&quot;headerlink&quot; title=&quot;实践之前的想法构思&quot;&gt;&lt;/a&gt;实践之前的想法构思&lt;/h3&gt;&lt;p&gt;1、动画由计时器setinterval控制开始，并且判断条件由clearinterval关闭计时器控制动画结束&lt;/p&gt;
&lt;p&gt;2、每次动画开始先执行clearinterval关闭计时器,防止重复开启计时器导致动画加快或变慢&lt;/p&gt;
&lt;p&gt;3、将动画封装成一个函数方法,以便与调用的方便和今后的重复使用&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://wigginshuang.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://wigginshuang.github.io/tags/JavaScript/"/>
    
      <category term="前端" scheme="https://wigginshuang.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="动画" scheme="https://wigginshuang.github.io/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript学习笔记(一)</title>
    <link href="https://wigginshuang.github.io/2017/07/03/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/"/>
    <id>https://wigginshuang.github.io/2017/07/03/JavaScript学习笔记-一/</id>
    <published>2017-07-03T11:31:27.000Z</published>
    <updated>2017-07-08T13:24:50.952Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉树结构"><a href="#二叉树结构" class="headerlink" title="二叉树结构"></a>二叉树结构</h2><h3 id="二叉树的概念"><a href="#二叉树的概念" class="headerlink" title="二叉树的概念"></a>二叉树的概念</h3><p>二叉树（Binary Tree）是n（n&gt;=0）个结点的有限集合，该集合或者为空集（空二叉树），或者由一个根结点和两棵互不相交的、分别称为根结点的左子树和右子树的二叉树组成。</p>
<p><img src="http://os1ydoyu7.bkt.clouddn.com/1463290304-544b190e6133b.jpg" alt=""></p>
<a id="more"></a>
<h3 id="二叉树的特点"><a href="#二叉树的特点" class="headerlink" title="二叉树的特点"></a>二叉树的特点</h3><p>每个结点最多有两棵子树，所以二叉树中不存在度大于2的结点。二叉树中每一个节点都是一个对象，每一个数据节点都有三个指针，分别是指向父母、左孩子和右孩子的指针。每一个节点都是通过指针相互连接的。相连指针的关系都是父子关系。</p>
<h3 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h3><p>二叉树的遍历(traversing binary tree)是指从根结点出发，按照某种次序依次访问二叉树中所有结点，使得每个结点被访问一次且仅被访问一次。</p>
<p>二叉树的遍历有三种方式，如下：</p>
<p>（1）前序遍历（DLR），首先访问根结点，然后遍历左子树，最后遍历右子树。简记根-左-右。</p>
<p>（2）中序遍历（LDR），首先遍历左子树，然后访问根结点，最后遍历右子树。简记左-根-右。</p>
<p>（3）后序遍历（LRD），首先遍历左子树，然后遍历右子树，最后访问根结点。简记左-右-根。 </p>
<h3 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h3><p>若二叉树为空，则空操作返回，否则先访问根结点，然后前序遍历左子树，再前序遍历右子树。</p>
<p><img src="http://os1ydoyu7.bkt.clouddn.com/qianxu.jpg" alt=""></p>
<p>遍历的顺序为：<code>A B D H I E J C F K G</code></p>
<p>JavaScript中的代码:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function preOrder(root)&#123;</div><div class="line">  <span class="keyword">if</span> (root) &#123;</div><div class="line">   arr.push(root);</div><div class="line">   preOrder(root.firstElementChild);</div><div class="line">   preOrder(root.lastElementChild);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><p>若树为空，则空操作返回，否则从根结点开始（注意并不是先访问根结点），中序遍历根结点的左子树，然后是访问根结点，最后中序遍历右子树。</p>
<p><img src="http://os1ydoyu7.bkt.clouddn.com/zhongxu.jpg" alt=""></p>
<p>遍历的顺序为：<code>H D I B E J A F K C G</code></p>
<p>JavaScript中的代码:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function inOrder(root)&#123;</div><div class="line">  <span class="keyword">if</span> (root) &#123;</div><div class="line">    inOrder(root.firstElementChild);</div><div class="line">    arr.push(root);</div><div class="line">   inOrder(root.lastElementChild);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><p>若树为空，则空操作返回，否则从左到右先叶子后结点的方式遍历访问左右子树，最后访问根结点。</p>
<p><img src="http://os1ydoyu7.bkt.clouddn.com/houxu.jpg" alt=""></p>
<p>遍历的顺序为：<code>H I D J E B K F G C A</code></p>
<p>JavaScript中的代码:<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function postOrder(root)&#123;</div><div class="line">  <span class="keyword">if</span> (root) &#123;</div><div class="line">   postOrder(root.firstElementChild); </div><div class="line">   postOrder(root.lastElementChild);</div><div class="line">   arr.push(root);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="这节我认为的知识难点"><a href="#这节我认为的知识难点" class="headerlink" title="这节我认为的知识难点"></a>这节我认为的知识难点</h2><p>1、<strong>递归函数需要理解</strong>(尤其是这个,当然下面的也很重要)</p>
<p>2、二叉树的初步理解</p>
<p>3、DOM要开始注意了</p>
<p>4、JavaScript中的算法的重要性开始凸显出来了</p>
<p><a href="https://github.com/WigginsHuang/JavaScript/tree/master/js_task_6" target="_blank" rel="external">代码地址</a></p>
<p><a href="http://htmlpreview.github.io/?https://github.com/WigginsHuang/JavaScript/blob/master/js_task_6/index.html" target="_blank" rel="external">demo地址</a></p>
<p>相关链接:<br><a href="https://segmentfault.com/a/1190000000740261#articleHeader0" target="_blank" rel="external"><br>https://segmentfault.com/a/1190000000740261#articleHeader0</a></p>
<p><a href="http://ife.baidu.com/note/detail/id/1221" target="_blank" rel="external">http://ife.baidu.com/note/detail/id/1221</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;二叉树结构&quot;&gt;&lt;a href=&quot;#二叉树结构&quot; class=&quot;headerlink&quot; title=&quot;二叉树结构&quot;&gt;&lt;/a&gt;二叉树结构&lt;/h2&gt;&lt;h3 id=&quot;二叉树的概念&quot;&gt;&lt;a href=&quot;#二叉树的概念&quot; class=&quot;headerlink&quot; title=&quot;二叉树的概念&quot;&gt;&lt;/a&gt;二叉树的概念&lt;/h3&gt;&lt;p&gt;二叉树（Binary Tree）是n（n&amp;gt;=0）个结点的有限集合，该集合或者为空集（空二叉树），或者由一个根结点和两棵互不相交的、分别称为根结点的左子树和右子树的二叉树组成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://os1ydoyu7.bkt.clouddn.com/1463290304-544b190e6133b.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://wigginshuang.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://wigginshuang.github.io/tags/JavaScript/"/>
    
      <category term="前端" scheme="https://wigginshuang.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="算法结构" scheme="https://wigginshuang.github.io/tags/%E7%AE%97%E6%B3%95%E7%BB%93%E6%9E%84/"/>
    
      <category term="DOM" scheme="https://wigginshuang.github.io/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>Hexo常用命令</title>
    <link href="https://wigginshuang.github.io/2017/06/25/Nexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://wigginshuang.github.io/2017/06/25/Nexo常用命令/</id>
    <published>2017-06-25T02:39:54.000Z</published>
    <updated>2017-06-25T09:51:52.467Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hexo基本命令"><a href="#hexo基本命令" class="headerlink" title="hexo基本命令"></a>hexo基本命令</h2><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>在blog文件夹安装,右键打开Git Bash输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>
<p>如果长时间没反应,先执行下面的命令，将npm镜像转为国内镜像，然后在执行上面这条指令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm config set registry https://registry.npm.taobao.org</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h3><p>将github上的hexo项目clone下来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init hexo</div></pre></td></tr></table></figure></p>
<p>安装依赖文件</p>
<p>进入到hexo文件夹</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cd hexo</div></pre></td></tr></table></figure>
<p>安装依赖文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>部署形成文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>本地测试:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<h3 id="部署到GitHub的命令"><a href="#部署到GitHub的命令" class="headerlink" title="部署到GitHub的命令"></a>部署到GitHub的命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo clean  #清除缓存 网页正常情况下可以忽略此条命令</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generator  #生成静态页面至public目录</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy  #将.deploy目录部署到GitHub</div></pre></td></tr></table></figure>
<p>新手上路，请多指教！</p>
<p>over</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;hexo基本命令&quot;&gt;&lt;a href=&quot;#hexo基本命令&quot; class=&quot;headerlink&quot; title=&quot;hexo基本命令&quot;&gt;&lt;/a&gt;hexo基本命令&lt;/h2&gt;&lt;h3 id=&quot;安装hexo&quot;&gt;&lt;a href=&quot;#安装hexo&quot; class=&quot;headerlink&quot; title=&quot;安装hexo&quot;&gt;&lt;/a&gt;安装hexo&lt;/h3&gt;&lt;p&gt;在blog文件夹安装,右键打开Git Bash输入&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm install -g hexo-cli&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果长时间没反应,先执行下面的命令，将npm镜像转为国内镜像，然后在执行上面这条指令&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm config set registry https://registry.npm.taobao.org&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://wigginshuang.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://wigginshuang.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博文</title>
    <link href="https://wigginshuang.github.io/2017/06/23/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87/"/>
    <id>https://wigginshuang.github.io/2017/06/23/我的第一篇博文/</id>
    <published>2017-06-23T12:53:21.000Z</published>
    <updated>2017-06-25T02:03:04.864Z</updated>
    
    <content type="html"><![CDATA[<p>2017年6月23日，我的第一个个人博客诞生啦！希望能够一直写下去，文笔不怎么好，就这样吧<br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017年6月23日，我的第一个个人博客诞生啦！希望能够一直写下去，文笔不怎么好，就这样吧&lt;br&gt;
    
    </summary>
    
      <category term="日常" scheme="https://wigginshuang.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="个人博文" scheme="https://wigginshuang.github.io/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E6%96%87/"/>
    
      <category term="日常" scheme="https://wigginshuang.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://wigginshuang.github.io/2017/06/23/hello-world/"/>
    <id>https://wigginshuang.github.io/2017/06/23/hello-world/</id>
    <published>2017-06-23T11:27:22.311Z</published>
    <updated>2017-06-23T11:27:22.311Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
